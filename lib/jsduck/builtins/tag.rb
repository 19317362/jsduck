module JsDuck::Builtins
  # Base class for all builtin tags.
  class Tag
    # Defines the name of the @tag.
    # The name itself must not contain the "@" sign.
    # For example: "cfg"
    attr_reader :pattern

    # Called by DocParser when the @tag is reached to do the parsing
    # from that point forward.  Gets passed an instance of DocParser.
    def parse(p)
    end

    # Defines the symbol under which the tag data is stored in final
    # member/class hash.
    attr_reader :key

    # Gets called with array of @tag data that was generated by
    # #parse.  The return value is stored under :key in the resulting
    # member/class hash.
    def process_doc(docs)
    end

    # The text to display in member signature.  Must be a hash
    # defining the short and long versions of the signature text:
    #
    #     {:long => "something", :short => "SOM"}
    #
    # Additionally the hash can contain a :tooltip which is the text
    # to be shown when the signature bubble is hovered over in docs.
    attr_reader :signature

    # Defines the name of object property in Ext.define()
    # configuration which, when encountered, will cause the
    # #parse_ext_define method to be invoked.
    attr_reader :ext_define_pattern

    # The default value to use when Ext.define is encountered, but the
    # key in the config object itself is not found.
    # This must be a Hash defining the key and value.
    attr_reader :ext_define_default

    # Called by Ast class to parse a config in Ext.define().
    # @param {Hash} cls A simple Hash representing a class on which
    # various properties can be set.
    # @param {AstNode} ast Value of the config in Ext.define().
    def parse_ext_define(cls, ast)
    end

    # Whether to render the tag before other content (:top) or after
    # it (:bottom).  Must be defined together with #to_html method.
    attr_accessor :html_position

    # Implement #to_html to transform tag data to HTML to be included
    # into documentation.
    #
    # It gets passed the value returned by #process_doc method. It
    # should return an HTML string to inject into document.  For help
    # in that it can use the #format method of formatter, which is
    # also passed in, to easily support Markdown and {@link/img} tags
    # inside the contents.
    def to_html(data, formatter)
    end

    # Returns all descendants of JsDuck::Builtins::Tag class.
    def self.descendants
      result = []
      ObjectSpace.each_object(::Class) do |cls|
        result << cls if cls < self
      end
      result
    end
  end
end
